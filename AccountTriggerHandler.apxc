public class AccountTriggerHandler {      

    public static List<User> rtrUser = [SELECT Id FROM User WHERE Name = 'Room to Read' LIMIT 1];
    
    public static void beforeInsert(List<Account> accts) {
        // Record owner always defaults to generic Room to Read user 
        for (Account a : accts) {
            a.OwnerId = !rtrUser.isEmpty() ? rtrUser[0].Id : UserInfo.getUserId();
        }
    }

	public static void beforeUpdate(List<Account> accts, Map<Id, Account> acctsOldMap, Map<Id, Account> acctsNewMap) {    

        // "HPC" stands for "Highest Previous Contribution."
        // This code block checks to see whether the largest gift amount for an account has changed;
        // if it has, it runs through all the previous gifts made by that donor to determine which gift
        // represented the HPC, and inserts the amount of the gift as well as its original currency 
        // in two separate fields        
        Set<Id> acctIdsChangeOfHPC = new Set<Id>();
        for (Account a : accts) {
            if (a.npo02__LargestAmount__c != acctsOldMap.get(a.Id).npo02__LargestAmount__c && a.npo02__LargestAmount__c > 0) {
                acctIdsChangeOfHPC.add(a.Id);
            }
        }
        List<Opportunity> previousGifts = [SELECT Id, AccountId, Amount, convertCurrency(Amount) amtInUSD, CurrencyIsoCode, CloseDate FROM Opportunity WHERE AccountId IN :acctIdsChangeOfHPC AND ForecastCategory = 'Closed' AND Amount != null ORDER BY AccountId];
        Map<Id, Decimal> acctIdToAmtInUSD = new Map<Id, Decimal>();
        Map<Id, Decimal> acctIdToHPCOriginalCurrency = new Map<Id, Decimal>();
        Map<Id, String> acctIdToOriginalCurrency = new Map<Id, String>();
        for (Opportunity opp : previousGifts) {
            if (!acctIdToAmtInUSD.containsKey(opp.AccountId)) {
                acctIdToAmtInUSD.put(opp.AccountId, (Decimal)opp.get('amtInUSD'));
                acctIdToHPCOriginalCurrency.put(opp.AccountId, opp.Amount);
                acctIdToOriginalCurrency.put(opp.AccountId, opp.CurrencyIsoCode);
            }
            else if ((Decimal)opp.get('amtInUSD') > acctIdToAmtInUSD.get(opp.AccountId)) {
                acctIdToAmtInUSD.put(opp.AccountId, (Decimal)opp.get('amtInUSD'));
                acctIdToHPCOriginalCurrency.put(opp.AccountId, opp.Amount);
                acctIdToOriginalCurrency.put(opp.AccountId, opp.CurrencyIsoCode);
            }
        }
        for (Account a : accts) {
            if (acctIdToHPCOriginalCurrency.containsKey(a.Id) && acctIdToOriginalCurrency.containsKey(a.Id)) {
                a.HPC_Value__c = acctIdToHPCOriginalCurrency.get(a.Id);
                a.HPC_Currency__c = acctIdToOriginalCurrency.get(a.Id);
            }
        }

        // Validation rules to prevent manual change of Current Relationship Manager or of account owner.
        // If count of RMs on the account has changed -- either due to the creation of a new account team member 
        // or as a result of a merge of accounts -- designate the current RM on the account (or evacuate current RM lookup
        // field if there is no longer an RM)
		Set<Id> acctIdsChangeOfRM = new Set<Id>();
        for (Account a : accts) {
            if (a.Updated_Via_Apex_Trigger__c==false && a.Current_Relationship_Manager__c!=acctsOldMap.get(a.Id).Current_Relationship_Manager__c) {
				a.addError('You cannot update this field directly; rather, you should either create an account team member record for the RM, or modify the RM\'s existing account team member record, and this field will be updated automatically.');                
            }
            else if (a.Updated_Via_Apex_Trigger__c==false && a.OwnerId!=acctsOldMap.get(a.Id).OwnerId) {
                a.addError('You cannot change the owner of an account directly. Rather, you should either create an account team member record for the account RM, and they will automatically be made the owner; or you should retire the current RM and let ownership of the account revert to the Room to Read user.');
            }
            else if (a.Updated_Via_Apex_Trigger__c==true && ((a.Current_Relationship_Manager__c!=acctsOldMap.get(a.Id).Current_Relationship_Manager__c && !String.isBlank(a.Current_Relationship_Manager__c) && a.Count_of_Acct_Team_Members__c == 0) || a.Count_of_RMs__c!=acctsOldMap.get(a.Id).Count_of_RMs__c && a.Count_of_RMs__c > 0)) {
                acctIdsChangeOfRM.add(a.Id);
            }
        }
		List<AccountTeamMember> RMs = [SELECT Id, AccountId, UserId 
                                       FROM AccountTeamMember 
                                       WHERE TeamMemberRole = 'Relationship Manager' AND (End_Date__c = null OR End_Date__c > TODAY)
                                       AND AccountId IN :acctIdsChangeOfRM
                                       ORDER BY AccountId, Start_Date__c DESC];
        Map<Id, Id> acctToRMUserId = new Map<Id, Id>();
        for (AccountTeamMember atm : RMs) {
            if (!acctToRMUserId.containsKey(atm.AccountId)) {
               acctToRMUserId.put(atm.AccountId, atm.UserId);
            }
        }
        Set<Id> acctIdsChangeOwner = new Set<Id>();
        for (Id acctId : acctIdsChangeOfRM) {
            if (acctToRMUserId.containsKey(acctId)) {
                acctsNewMap.get(acctId).Current_Relationship_Manager__c = acctToRMUserId.get(acctId);
                if (acctsNewMap.get(acctId).OwnerId!=acctsNewMap.get(acctId).Current_Relationship_Manager__c) {
                    // Keep old owner and let queueable class determine who new owner should be
                    acctsNewMap.get(acctId).OwnerId = acctsOldMap.get(acctId).OwnerId;
                    acctIdsChangeOwner.add(acctId);
                }
            }
            else if (!acctToRMUserId.containsKey(acctId) && acctsNewMap.get(acctId).Count_of_Acct_Team_Members__c > 0) {
                acctsNewMap.get(acctId).Current_Relationship_Manager__c = null;
                if (!rtrUser.isEmpty() && acctsNewMap.get(acctId).OwnerId!=rtrUser[0].Id) {
                    // Keep old owner and let queueable class revert ownership to RtR user
                    acctsNewMap.get(acctId).OwnerId = acctsOldMap.get(acctId).OwnerId;
                    acctIdsChangeOwner.add(acctId);
                }
            }
        }
        if (!acctIdsChangeOwner.isEmpty() && Limits.getQueueableJobs()==0) {
            System.enqueueJob(new QueueableChangeAcctOwnerKeepAcctTeam(acctIdsChangeOwner));
        }
		        
    }
    
	public static void afterUpdate(List<Account> accts, Map<Id, Account> acctsOldMap, Map<Id, Account> acctsNewMap) {
		// Update contacts with account currency code when the latter changes, or when new household member is added
        Set<Id> acctsWCurrencyISOCodeChangesOrNewMembers = new Set<Id>();
        Set<Id> acctsWCurrencyISOCodeOrGeolocationChanges = new Set<Id>();
        for (Account a : accts) {
            if (a.CurrencyIsoCode != acctsOldMap.get(a.Id).CurrencyIsoCode) {
                acctsWCurrencyISOCodeChangesOrNewMembers.add(a.Id);
                if (!a.IsExcludedFromRealign) {
                	acctsWCurrencyISOCodeOrGeolocationChanges.add(a.Id);
                }
            }
            if (a.npsp__Number_of_Household_Members__c  != acctsOldMap.get(a.Id).npsp__Number_of_Household_Members__c) {
                acctsWCurrencyISOCodeChangesOrNewMembers.add(a.Id);
            }
            if (a.BillingCountry != acctsOldMap.get(a.Id).BillingCountry && !a.IsExcludedFromRealign) {
                acctsWCurrencyISOCodeOrGeolocationChanges.add(a.Id);
            }
        }
		List<Contact> contactsToUpdate = new List<Contact>(); 
		Set<Id> contactIds = new Set<Id>();        
        if (!acctsWCurrencyISOCodeChangesOrNewMembers.isEmpty()) {
            List<Contact> contactsWAcctCurrCodeChanges = [SELECT Id, AccountId, Name FROM Contact WHERE AccountId IN :acctsWCurrencyISOCodeChangesOrNewMembers];
            for (Contact c : contactsWAcctCurrCodeChanges) {
                c.CurrencyIsoCode = acctsNewMap.get(c.AccountId).CurrencyIsoCode;
                contactIds.add(c.Id);
                contactsToUpdate.add(c);
            }
        }
        
        // Flags contacts for re-sync to EN when accounts have been marked for push
		Set<Id> acctIdsMarkedForENPush = new Set<Id>();
        for (Account a : accts) {
            if (a.EN_Push__c == true && acctsOldMap.get(a.Id).EN_Push__c == false) {
                acctIdsMarkedForENPush.add(a.Id);
            }
        }
        if (!acctIdsMarkedForENPush.isEmpty()) { 
            List<Contact> contactsWAcctsMarkedForENPush = 
                [SELECT Id, Name, AccountId, Email, engaging__EN_Last_Modified_Date__c
                 FROM Contact
                 WHERE AccountId IN :acctIdsMarkedForENPush
                 ORDER BY AccountId];         
            for (Contact c : contactsWAcctsMarkedForENPush) {
                // Make sure contact record has not already been added to list of contacts to be updated (otherwise will throw error)
                Datetime now = System.now();
				Datetime localNow = Datetime.newInstance(now.year(), now.month(), now.day(), now.hour(), now.minute(), now.second());
                if (!String.isBlank(c.Email) && !contactIds.contains(c.Id) && (c.engaging__EN_Last_Modified_Date__c == null || c.engaging__EN_Last_Modified_Date__c < localNow.addMinutes(-1))) {
                    c.engaging__EN_Last_Modified_Date__c = localNow;
                    contactsToUpdate.add(c);
                }
            }
        }
        if (!contactsToUpdate.isEmpty()) {
        	Database.update(contactsToUpdate, false);
        }
        if (!Test.isRunningTest() && !acctsWCurrencyISOCodeOrGeolocationChanges.isEmpty() && Limits.getQueueableJobs()==0) {
            System.enqueueJob(new QueueableRunTerritoryAssignmentRules(acctsWCurrencyISOCodeOrGeolocationChanges));
        }
    }
    
}