trigger AccountTeamMemberTrigger on AccountTeamMember (before insert, after insert, after update, after delete) {
    
    // Unit test for this trigger included with tests for queueable class (QueueableChangeAcctOwnerKeepAcctTeam)
    
    public static List<User> rtrUser = [SELECT Id FROM User WHERE Name = 'Room to Read' LIMIT 1];    

    // User must be owner of account before she can be added as an account team member -- hence this
    // very odd trigger that updates the related account *before* inserting a new account team member record
    if (Trigger.isBefore) {
        Map<Id, List<AccountTeamMember>> acctToATMs = new Map<Id, List<AccountTeamMember>>();
        for (AccountTeamMember atm : Trigger.new) {
            if (!acctToATMs.containsKey(atm.AccountId)) {
                acctToATMs.put(atm.AccountId, new List<AccountTeamMember>{atm});
            }
            else {acctToATMs.get(atm.AccountId).add(atm);}
        }
        List<Account> accts = [SELECT Id, Count_of_Acct_Team_Members__c FROM Account WHERE Id IN :acctToATMs.keySet()];
        List<Account> acctsToUpdate = new List<Account>();
        for (Account a : accts) {
			Boolean insertIncludesCurrentRM = false;
			if (a.Count_of_Acct_Team_Members__c == 0) {
            	a.Updated_Via_Apex_Trigger__c = true;
                for (AccountTeamMember atm : acctToATMs.get(a.Id)) {
                    if (atm.TeamMemberRole == 'Relationship Manager' && (atm.End_Date__c == null || atm.End_Date__c > System.today())) {
                        insertIncludesCurrentRM = true;
                        a.OwnerId = atm.UserId; 
                        a.Current_Relationship_Manager__c = atm.UserId;
                        break;
                    }
                    else if (!insertIncludesCurrentRM) {a.OwnerId = atm.UserId;}                   
                }
            }
			acctsToUpdate.add(a);            
        }
        if (!acctsToUpdate.isEmpty()) {Database.update(acctsToUpdate);}
    }
    
    // If the RM is no longer current or an end date has been entered on the RM's ATM record, check to 
    // determine whether there is still an active RM on the account
    else if (Trigger.isAfter) {
        Set<Id> acctIds = new Set<Id>();
		List<AccountTeamMember> ATMs = Trigger.isDelete ? Trigger.old : Trigger.new;        
        for (AccountTeamMember atm : ATMs) {
			acctIds.add(atm.AccountId);
        }
        List<AccountTeamMember> RMs = [SELECT UserId, AccountId, TeamMemberRole, Start_Date__c, End_Date__c, Status__c
                                        FROM AccountTeamMember
                                        WHERE TeamMemberRole = 'Relationship Manager' AND Status__c = 'Current'
                                        AND AccountId IN :acctIds
                                        ORDER BY AccountId, Start_Date__c DESC];
        List<Account> accts = [SELECT Id, OwnerId, Current_Relationship_Manager__c FROM Account WHERE Id IN :acctIds];
        Map<Id, Id> acctToCurrentRMUserId = new Map<Id, Id>();
        for (AccountTeamMember atm : RMs) {
            if (!acctToCurrentRMUserId.containsKey(atm.AccountId)) {            
        		acctToCurrentRMUserId.put(atm.AccountId, atm.UserId);
            }
        }
        List<Account> acctsToUpdate = new List<Account>();
        Set<Id> acctIdsChangeOwner = new Set<Id>();
        for (Account a : accts) {
            a.Updated_Via_Apex_Trigger__c = true;
            if (acctToCurrentRMUserId.containsKey(a.Id) && a.Current_Relationship_Manager__c!=acctToCurrentRMUserId.get(a.Id)) {
                a.Current_Relationship_Manager__c = acctToCurrentRMUserId.get(a.Id);
                if (a.OwnerId!=a.Current_Relationship_Manager__c) {
                    acctIdsChangeOwner.add(a.Id);
                }
            }
            else if (!acctToCurrentRMUserId.containsKey(a.Id)) {
                a.Current_Relationship_Manager__c = null;
                if (!rtrUser.isEmpty() && a.OwnerId!=rtrUser[0].Id) {
                	acctIdsChangeOwner.add(a.Id);
                }
            }
			acctsToUpdate.add(a);            
        }
        Database.update(acctsToUpdate, false);
        if (!acctIdsChangeOwner.isEmpty() && Limits.getQueueableJobs()==0) {
            System.enqueueJob(new QueueableChangeAcctOwnerKeepAcctTeam(acctIdsChangeOwner));
        }
    }
    
    
}