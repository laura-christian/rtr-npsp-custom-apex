public class BatchConvertLeadsToContacts implements Database.Batchable<DuplicateRecordSet> {
	
	public List<DuplicateRecordSet> dupeRecSets = new List<DuplicateRecordSet>();
	
	public BatchConvertLeadsToContacts(List<DuplicateRecordSet> dupeRecSets) {
		this.dupeRecSets = dupeRecSets;
	}
	
	public List<DuplicateRecordSet> start(Database.BatchableContext BC) {
		System.debug('Initiating batch dedupe of leads');
		return dupeRecSets;
	}
	
	public void execute(Database.BatchableContext BC, List<DuplicateRecordSet> scopeDRS) {
		// Only one duplicate record set will be processed at a time; so
		// select first record in scope and perform work on it
		DuplicateRecordSet drs = scopeDRS[0];
		// Get all duplicate record items in the set
		List<DuplicateRecordItem> dupeRecItems = [SELECT Id, Name, RecordId
												  FROM DuplicateRecordItem
												  WHERE DuplicateRecordSetId=:drs.Id];
		Set<Id> dupeLeadIds = new Set<Id>();
		List<Id> dupeContactIds = new List<Id>();
		// Use getDescribe() method to identify sObject type of each duplicate
		// record item, which may be a contact or a lead
		for (DuplicateRecordItem dri : dupeRecItems) {
			if (dri.RecordId.getSObjectType().getDescribe().getName()=='Contact') {
				System.debug('Duplicate record item is a contact');
				dupeContactIds.add(dri.RecordId);
			}
			else if (dri.RecordId.getSObjectType().getDescribe().getName()=='Lead') {
				System.debug('Duplicate record item is a lead');
				dupeLeadIds.add(dri.RecordId);
			}
		}
		// Get the duplicate contact record whose insertion or update triggered the creation of
		// the duplicate record set
		List<Contact> dupeContacts = [SELECT Id, AccountId, FirstName, LastName, Email, npe01__HomeEmail__c,
									  npe01__WorkEmail__c, npe01__AlternateEmail__c, npe01__Preferred_Email__c, 
                                      MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry,
									  Email_Opted_In__c, GDPR_Consent_Date__c, HasOptedOutOfEmail, GDPR_Decline_Date__c,
                                      Do_Not_Solicit__c, Newsletter__c, Book_Club__c, Forms_Filled_Out__c, CreatedDate
									  FROM Contact
									  WHERE Id IN :dupeContactIds
									  AND isDeleted=false
									  ORDER BY CreatedDate];
		System.debug('Number of duplicate contacts: ' + dupeContacts.size());
		// Get the duplicate lead records in the set (there should be at least one,
		// based on the duplicate rules that are in effect)
		List<Lead> dupeLeads = [SELECT Id, FirstName, LastName, Street, City, State, PostalCode,
                                Country, Email, Forms_Filled_Out__c, 
								Email_Opted_In__c, GDPR_Consent_Date__c, HasOptedOutOfEmail, GDPR_Decline_Date__c,
                                Do_Not_Solicit__c, Newsletter__c, Book_Club__c, CreatedDate
								FROM Lead
								WHERE Id IN :dupeLeadIds
								AND isDeleted=false AND isConverted=false
								ORDER BY CreatedDate];
		System.debug('Number of duplicate leads: ' + dupeLeads.size());
        Set<String> uniqueForms = new Set<String>();
		Date maxGDPRConsentDate = Date.newInstance(1900, 1, 1);
        Boolean optedInToEmail = false;
        Boolean doNotSolicit = false;
        Boolean signedUpForNewsletter = false;
        Boolean signedUpForBookClub = false;
        String street;
        String city;
        String state;
        String postalCode;
        String country;
        // Loop over all leads returned in queries in order to identify latest GDPR consent date
        // and to collate all web-to-lead forms filled out by the individual with this email address
        for (Lead lead : dupeLeads) {
            if (!String.isBlank(lead.Forms_Filled_Out__c)) {
                List<String> formList = lead.Forms_Filled_Out__c.split(';');
                uniqueForms.addAll(formList);
            }
			if (lead.GDPR_Consent_Date__c!=null && lead.GDPR_Consent_Date__c>maxGDPRConsentDate) {
				maxGDPRConsentDate = lead.GDPR_Consent_Date__c;
                optedInToEmail = true;
			}
            if (lead.Email_Opted_In__c == true) {
                optedInToEmail = true;
            }
            if (lead.Do_Not_Solicit__c == true) {
                doNotSolicit = true;
            }
            if (lead.Newsletter__c == true) {
                signedUpForNewsletter = true;
            }
            if (lead.Book_Club__c == true) {
                signedUpForBookClub = true;
            }
            if (!String.isBlank(lead.Street)) {
                street = lead.Street;
            }
            if (!String.isBlank(lead.City)) {
                city = lead.City;
            }
            if (!String.isBlank(lead.State)) {
                state = lead.State;
            }
            if (!String.isBlank(lead.PostalCode)) {
                postalCode = lead.PostalCode;
            }
            if (!String.isBlank(lead.Country)) {
                country = lead.Country;
            } 
        }
        // Do the same thing for the contact that triggered creation of the duplicate record set
        for (Contact con : dupeContacts) {
            if (con.Forms_Filled_Out__c!=null) {
                List<String> formList = con.Forms_Filled_Out__c.split(';');
                uniqueForms.addAll(formList);
            }
            if (con.GDPR_Consent_Date__c!=null && con.GDPR_Consent_Date__c>maxGDPRConsentDate) {
                maxGDPRConsentDate = con.GDPR_Consent_Date__c;
                optedInToEmail = true;
            }
            if (con.Email_Opted_In__c == true) {
                optedInToEmail = true;
            }
            if (con.Do_Not_Solicit__c == true) {
                doNotSolicit = true;
            }
            if (con.Newsletter__c == true) {
                signedUpForNewsletter = true;
            }
            if (con.Book_Club__c == true) {
                signedUpForBookClub = true;
            }
        }
        // Collate all forms filled out; listify in order to assign colon-separated string value
        // to multi-select picklist field
        List<String> allFormsFilledOut = new List<String>();
        allFormsFilledOut.addAll(uniqueForms);
        String formsMultiSelectString = String.join(allFormsFilledOut, ';');
        System.debug('All forms: ' + formsMultiSelectString);
		if (maxGDPRConsentDate > Date.newInstance(1900, 1, 1) || optedInToEmail) {
            dupeContacts[0].GDPR_Consent_Date__c = maxGDPRConsentDate > Date.newInstance(1900, 1, 1) ? maxGDPRConsentDate : null;
            dupeContacts[0].Email_Opted_In__c = true;
            dupeContacts[0].HasOptedOutOfEmail = false;
            dupeContacts[0].GDPR_Decline_Date__c = null;
        }
        if (formsMultiSelectString!='') {
            dupeContacts[0].Forms_Filled_Out__c = formsMultiSelectString;
        }
        dupeContacts[0].Do_Not_Solicit__c = doNotSolicit;
        dupeContacts[0].Newsletter__c = signedUpForNewsletter;
        dupeContacts[0].Book_Club__c = signedUpForBookClub;
        if (!String.isBlank(street) && !String.isBlank(country) && String.isBlank(dupeContacts[0].MailingStreet)) {
			dupeContacts[0].MailingStreet = street;
            dupeContacts[0].MailingCity = city;
            dupeContacts[0].MailingState = state;
            dupeContacts[0].MailingPostalCode = postalCode;
            dupeContacts[0].MailingCountry = country;
        }
		update dupeContacts[0];

        // Check to see which was created first: the lead record or the contact record. If
        // the lead record was created first, and the insertion of a matching contact record upon receipt of the 
        // individual's first gift to RtR triggered the creation of this duplicate record set,
        // then we will convert/merge the lead to the new contact record.
        System.debug('Lead should be converted to contact?: ' + String.valueOf(dupeContacts[0].CreatedDate>dupeLeads[0].CreatedDate));
        if (dupeContacts[0].CreatedDate>dupeLeads[0].CreatedDate) {
            LeadStatus convertStatus = [SELECT Id, MasterLabel
										FROM LeadStatus WHERE IsConverted=true LIMIT 1];
			Database.LeadConvert lc = new database.LeadConvert();
			lc.setLeadId(dupeLeads[0].Id);
            lc.setConvertedStatus(convertStatus.MasterLabel);
			lc.setAccountId(dupeContacts[0].AccountId);
			lc.setContactId(dupeContacts[0].Id);
			lc.setDoNotCreateOpportunity(true);
			Database.LeadConvertResult result = Database.convertLead(lc, false);
			System.debug('Conversion of lead to existing contact/account was a success?: ' + result.isSuccess());
        }
        else {
            // If contact was created *before* the first lead record for this individual,
            // simply delete duplicate leads (relevant details have already been transcribed
            // onto the original contact record)
            Database.delete(dupeLeads, false);
		}
	}

	public void finish(Database.BatchableContext bc) {
		AsyncApexJob job = [SELECT Id, Status FROM AsyncApexJob WHERE Id = :bc.getJobId()]; 
		System.debug('>>>> Status of batch job: ' + job.Status);
	}
	
}